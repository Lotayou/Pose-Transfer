20190928
# Creating new dataset with bundled reference image of the same person.
# Creating two stage model backbone and I/O interface.

20190930
# Dataset: Adding FUNIT class label (Is it really necessary to set each person as a class?)
# Model: For training stage, just append ground truth as class image

20191001
# Model: Integrating PATN and FUNIT models together, forward, backward and updating(not tested)
    @ TODO: pay attention if FUNIT need square input, and padding zeros if necessary
    @ TODO: implementing saving and logging utils.
    @ TODO: Testing.

20191002:
# Saving and logging utils complete.
# Square padding check: FUNIT network performs 4 downsampling at most, leading to 16* spatial scaling.
    Current input (256, 176) should be fine. Wait until runtime-check.
# Training scheme I: Fix patn, scheduling on FUNIT only. Start training ASAP.

20191003:
# Start testing the integreated framework.
    # Critical bug fix: In FUNIT_module/blocks.py, set inplace=False for ReLU and LeakyReLU, otherwise some variables that require gradients would be modified in-place during back-propagation, leading to RuntimeError.

# Start training

20191004:
# Unexpected error occured at 0734:
    # /opt/conda/conda-bld/pytorch_1565272279342/work/aten/src/ATen/native/cuda/IndexKernel.cu:60: lambda [](int)->auto::operator()(int)->auto: block: [4,0,0], thread: [117,0,0] Assertion `index >= -sizes[i] && index < sizes[i] && "index out of bounds"` failed.
    # File "/backup1/lingboyang/human_image_generation/CVPR2019_pose_transfer/models/FUNIT_module/funit_model.py", line 63, in forward
        l_real_pre, acc_r, resp_r = self.dis.calc_dis_real_loss(xb, lb)
      File "/backup1/lingboyang/human_image_generation/CVPR2019_pose_transfer/models/FUNIT_module/networks.py", line 81, in calc_dis_real_loss
        resp_real, gan_feat = self.forward(input_real, input_label)
      File "/backup1/lingboyang/human_image_generation/CVPR2019_pose_transfer/models/FUNIT_module/networks.py", line 68, in forward
        out = out[index, y, :, :]
        
    # Solution: Add `drop_last=True` in dataloader. Make sure each batch is of the same size!

# The code runs too slow!
    # 4.5s per batch, 12 h per epoch... Unacceptable.
    # Reduce I/O cost:
        # Disable random sample for indexing... Shuffling will do.
        # Change jpeg loader from PIL.Image to jpeg4py
    # Use random partial subsets
        # Limit to 4000 pairs per epoch.

Work to do:
# Implementing testing script.
    # Dealing with Ys bundle, align dimension 0. (k=3?)
# Using A for class reference, or use more than one image? Try both case and perform ablation study.
# Implementing scheduler mechanism for funit and patn: fix PATN and updating FUNIT for K epochs,
    then set PATN learning rate to 1/10 of FUNIT and continue for another K epochs (K=30?)
# Attach with other pose-guided image generation framework (deformable GAN)?